The Game
- Lights Out is a logic/puzzle game, played on a gird of individual lights, which can either be lit or unlit.
- The puzzle is won when when all of the lights are turned off.
- You can click on a cell to toggle that light — but it also toggles the light above it, to the left of it, to the right of it, and below it.
- Cells on an edge or in the corner won’t flip as many lights, since they are missing some neighbors.

Plan
- Before reading further, take a moment to think about how you would design this, component-wise.
- We’ll give you a component design further down, but thinking about the requirements and what components/state/props would be needed will help you learn the skills to design applications out of components.

------------------------------------------------------------------------------------------------------------------------------------

PAM: ok.... 
    - 2d grid 
        - can be at least 1x2 
        -  ⏹️⏹️ -> 🟦🟦 
        - theirs states are lit of unlit, binary true or false.
    - each grid cell toggle effects the cells above, right, below, and left around it. ⬆️➡️⬇️⬅️
        🟦 ⏹️ 🟦      🟦 ⏹️ 🟦      🟦 🟦 🟦                                               
                                                                                                            
        ⏹️ ⏹️ ⏹️  ->  ⏹️ 🟥 ⏹️  ->  🟦 🟦 🟦                                                    
                                                                                                            
        🟦 ⏹️ 🟦      🟦 ⏹️ 🟦      🟦 🟦 🟦          

    Components Hierarchy Plan:

    - App.js:
        - Serves as the top-level component to set everything up and render the next components.
        - Manages the overall state of the game.

    - Board.js:
        - A child component of `App.js`.
        - Represents the Lights Out game board.
        - Builds the grid, defines key-names, and feeds a `useState` hook callback function to toggle the light to the next components as props.
        - Renders multiple `Cell` components.

    - Cell.js:
        - A child component of `Board.js`.
        - Represents an individual light.
        - Receives its state (lit/unlit) and click event as props.
        - Maintains a `useState` hook with a boolean value (lit or unlit) and a `setState` function, likely named `toggle`.
        - In the `toggle` hook, it flips the value between lit and unlit.
        - Each cell may keep track of its neighboring cells.
        - Sends click events updates up the hierarchy to the `App` component to update the game state with the click event handler.

---------------------------------------------------------------------------------------------------------------------------------------------------------

Provided Plan:

Component Design

App
    As often, this is a very simple component. It just renders the Board component.
Board
    The most sophisticated component. It will hold the state that represents the in-memory grid of true/false for lights-on/off. Since the state for the board lives here, this is also were the setState() calls will need to go — and therefore, the functions that call setState().
Cell
    A simpler component. This will simply render a <div>, where the CSS classes will indicate whether this cell is lit or unlit. This is what the user clicks on — but it will need to call a function it receives from the Board, since that will need to update the state.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

Components Hierarchy Plan Revised:

    App Component:
        Simple component that renders the Board component.
        Manages the overall state of the game.

    Board Component:
        Holds the state representing the in-memory grid of lights (true/false for lights-on/off).
        Contains setState() calls to update the game state.
        Renders multiple Cell components.
        Passes down a function to individual Cell components to handle the click event.

    Cell Component:
        Simple component that renders a <div>.
        CSS classes indicate whether the cell is lit or unlit.
        Handles the click event and calls a function received from the Board to update the state.




